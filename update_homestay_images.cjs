#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// Mapping t√™n th∆∞ m·ª•c v·ªõi t√™n homestay
const folderToHomestayMapping = {
  '1941M_Homestay_Ta_Xua': '1941M Homestay T√† X√πa',
  'Anh_Tai_May_Homestay': 'Anh T√†i M√¢y Homestay',
  'Homestay_Coffee_ƒêinh_Nui_Ta_Xua': 'Homestay Coffee ƒê·ªânh N√∫i T√† X√πa',
  'Mando_Homestay_Ta_Xua': 'Mando Homestay T√† X√πa',
  'May_Mo_Mang_Homestay_Ta_Xua': 'May M∆° M√†ng Homestay T√† X√πa',
  'Mayhome_Ta_Xua': 'Mayhome T√† X√πa',
  'Mua_Homestay_Ta_Xua': 'M√πa Homestay T√† X√πa',
  'Ngong_Ta_Xua_Homestay': 'Ng·ªóng T√† X√πa Homestay',
  'Ta_Xua_Cloud_Homestay': 'T√† X√πa Cloud Homestay',
  'Ta_Xua_Ecolodge': 'T√† X√πa Ecolodge',
  'Ta_Xua_HillsHomestay': 'T√† X√πa Hills Homestay',
  'Ta_Xua_May_Homestay': 'T√† X√πa M√¢y Homestay',
  'Tao_Homestay': 'T√°o Homestay',
  'Tu_Mi': 'T√∫ M·ªâ',
  'Xoe_Homestay': 'Xo√® Homestay'
};

function getAllPngFiles(hotelsDir) {
  const result = {};
  
  // ƒê·ªçc t·∫•t c·∫£ th∆∞ m·ª•c trong Hotels
  const homestayFolders = fs.readdirSync(hotelsDir, { withFileTypes: true })
    .filter(dirent => dirent.isDirectory())
    .map(dirent => dirent.name);

  homestayFolders.forEach(folderName => {
    const folderPath = path.join(hotelsDir, folderName);
    const accommodationImagePath = path.join(folderPath, 'accomodation image');
    
    if (fs.existsSync(accommodationImagePath)) {
      const pngFiles = fs.readdirSync(accommodationImagePath)
        .filter(file => file.toLowerCase().endsWith('.png'))
        .map(file => `/Hotels/${folderName}/accomodation image/${file}`);
      
      if (pngFiles.length > 0) {
        result[folderName] = pngFiles;
      }
    }
  });
  
  return result;
}

function updateHomestayData() {
  const hotelsDir = '/Users/phuoctrinhgia/Desktop/2. PROJECT VIVIET/Ta Xua Mua Xanh/public/Hotels';
  const homestayDataPath = '/Users/phuoctrinhgia/Desktop/2. PROJECT VIVIET/Ta Xua Mua Xanh/src/data/homestayRealData.ts';
  
  // L·∫•y t·∫•t c·∫£ file PNG
  const pngFilesByFolder = getAllPngFiles(hotelsDir);
  
  console.log('T√¨m th·∫•y c√°c file PNG:');
  Object.entries(pngFilesByFolder).forEach(([folder, files]) => {
    console.log(`${folder}: ${files.length} files`);
    files.forEach(file => console.log(`  - ${file}`));
  });
  
  // ƒê·ªçc file homestayRealData.ts hi·ªán t·∫°i
  let homestayDataContent = fs.readFileSync(homestayDataPath, 'utf8');
  
  // T·∫°o backup
  fs.writeFileSync(homestayDataPath + '.backup', homestayDataContent);
  
  // C·∫≠p nh·∫≠t images cho t·ª´ng homestay
  Object.entries(pngFilesByFolder).forEach(([folderName, pngFiles]) => {
    const homestayName = folderToHomestayMapping[folderName];
    if (!homestayName) {
      console.log(`Kh√¥ng t√¨m th·∫•y mapping cho th∆∞ m·ª•c: ${folderName}`);
      return;
    }
    
    // T√¨m v√† thay th·∫ø m·∫£ng images
    const namePattern = new RegExp(`"name":\\s*"${homestayName.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}"`, 'g');
    const nameMatch = homestayDataContent.match(namePattern);
    
    if (nameMatch) {
      // T√¨m v·ªã tr√≠ c·ªßa homestay n√†y
      const nameIndex = homestayDataContent.indexOf(nameMatch[0]);
      const homestayStart = homestayDataContent.lastIndexOf('{', nameIndex);
      const homestayEnd = homestayDataContent.indexOf('},', homestayStart) + 1;
      
      if (homestayStart !== -1 && homestayEnd !== -1) {
        const homestaySection = homestayDataContent.substring(homestayStart, homestayEnd);
        
        // Thay th·∫ø m·∫£ng images
        const imagesArrayString = JSON.stringify(pngFiles, null, 6).replace(/^/gm, '    ');
        const updatedSection = homestaySection.replace(
          /"images":\s*\[[^\]]*\]/s,
          `"images": ${imagesArrayString}`
        );
        
        homestayDataContent = homestayDataContent.substring(0, homestayStart) + 
                             updatedSection + 
                             homestayDataContent.substring(homestayEnd);
        
        console.log(`‚úÖ C·∫≠p nh·∫≠t ${pngFiles.length} ·∫£nh cho ${homestayName}`);
      }
    } else {
      console.log(`‚ùå Kh√¥ng t√¨m th·∫•y homestay: ${homestayName}`);
    }
  });
  
  // Ghi file m·ªõi
  fs.writeFileSync(homestayDataPath, homestayDataContent);
  console.log('\n‚úÖ Ho√†n th√†nh c·∫≠p nh·∫≠t homestayRealData.ts');
  console.log('üìÅ Backup ƒë∆∞·ª£c l∆∞u t·∫°i: homestayRealData.ts.backup');
}

// Ch·∫°y script
updateHomestayData();