#!/usr/bin/env node

/**
 * Script ƒë·ªìng b·ªô d·ªØ li·ªáu homestay t·ª´ th∆∞ m·ª•c local v√†o MongoDB Staging
 * 
 * Ch·ª©c nƒÉng:
 * - Qu√©t t·∫•t c·∫£ th∆∞ m·ª•c homestay trong public/Hotel:Homestay
 * - ƒê·ªçc th√¥ng tin ·∫£nh v√† m√¥ t·∫£ t·ª´ m·ªói th∆∞ m·ª•c
 * - Upsert d·ªØ li·ªáu v√†o MongoDB collection 'accommodations'
 * - X·ª≠ l√Ω l·ªói v√† b√°o c√°o k·∫øt qu·∫£
 */

import fs from 'fs';
import path from 'path';
import { MongoClient } from 'mongodb';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

// ES modules compatibility
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Configuration
const STAGING_MONGO_URI = process.env.STAGING_MONGO_URI || 'mongodb://localhost:27017/taxua_staging';
const DB_NAME = 'taxua_staging';
const COLLECTION_NAME = 'accommodations';

// Paths
const ROOT_PATH = path.join(dirname(__dirname), 'public', 'Hotel:Homestay');

// Statistics tracking
const stats = {
  totalScanned: 0,
  created: 0,
  updated: 0,
  errors: []
};

/**
 * T·∫°o slug t·ª´ t√™n homestay
 * @param {string} name - T√™n homestay
 * @returns {string} - Slug URL-friendly
 */
function createSlug(name) {
  return name
    .toLowerCase()
    .trim()
    .replace(/[^\w\s-]/g, '') // Lo·∫°i b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát
    .replace(/[\s_-]+/g, '-') // Thay th·∫ø kho·∫£ng tr·∫Øng v√† _ b·∫±ng -
    .replace(/^-+|-+$/g, ''); // Lo·∫°i b·ªè - ·ªü ƒë·∫ßu v√† cu·ªëi
}

/**
 * ƒê·ªçc t·∫•t c·∫£ file ·∫£nh PNG t·ª´ th∆∞ m·ª•c accommodation image
 * @param {string} accommodationPath - ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c homestay
 * @param {string} folderName - T√™n th∆∞ m·ª•c homestay
 * @returns {Promise<string[]>} - M·∫£ng URL ·∫£nh
 */
async function getImageUrls(accommodationPath, folderName) {
  const imagePath = path.join(accommodationPath, 'accomodation image');
  console.log("ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c ·∫£nh ƒë∆∞·ª£c x√¢y d·ª±ng:", imagePath);
  
  // Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa th∆∞ m·ª•c ·∫£nh
  const imagePathExists = fs.existsSync(imagePath);
  console.log("Th∆∞ m·ª•c ·∫£nh c√≥ t·ªìn t·∫°i kh√¥ng?:", imagePathExists);
  
  if (!imagePathExists) {
    console.warn("‚ö†Ô∏è  C·∫¢NH B√ÅO: Th∆∞ m·ª•c ·∫£nh kh√¥ng t·ªìn t·∫°i, b·ªè qua x·ª≠ l√Ω ·∫£nh cho:", folderName);
    return [];
  }
  
  try {
    // ƒê·ªçc n·ªôi dung th∆∞ m·ª•c ·∫£nh
    const files = fs.readdirSync(imagePath);
    console.log("C√°c file t√¨m th·∫•y (tr∆∞·ªõc khi l·ªçc):", files);
    
    // L·ªçc file .png (bao g·ªìm c·∫£ .PNG)
    const pngFiles = files.filter(file => path.extname(file).toLowerCase() === '.png');
    console.log("C√°c file .png t√¨m th·∫•y (sau khi l·ªçc):", pngFiles);
    
    // T·∫°o m·∫£ng image URLs
    const imageUrls = pngFiles.map(file => 
        `/Hotel:Homestay/${folderName}/accomodation image/${file}`
      );
    console.log("M·∫£ng imageUrls cu·ªëi c√πng ƒë∆∞·ª£c t·∫°o ra:", imageUrls);
    
    return imageUrls;
  } catch (error) {
    console.error("L·ªñI: Kh√¥ng th·ªÉ ƒë·ªçc th∆∞ m·ª•c ·∫£nh:", error);
    throw new Error(`Kh√¥ng th·ªÉ ƒë·ªçc th∆∞ m·ª•c ·∫£nh: ${error.message}`);
  }
}

/**
 * ƒê·ªçc n·ªôi dung file markdown t·ª´ th∆∞ m·ª•c information
 * @param {string} accommodationPath - ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c homestay
 * @returns {Promise<string>} - N·ªôi dung m√¥ t·∫£
 */
async function getDescription(accommodationPath) {
  const infoPath = path.join(accommodationPath, 'information');
  
  try {
    const files = await fs.promises.readdir(infoPath);
    const mdFile = files.find(file => file.toLowerCase().endsWith('.md'));
    
    if (!mdFile) {
      throw new Error('Kh√¥ng t√¨m th·∫•y file .md trong th∆∞ m·ª•c information');
    }
    
    const filePath = path.join(infoPath, mdFile);
    const content = await fs.promises.readFile(filePath, 'utf-8');
    
    return content.trim();
  } catch (error) {
    throw new Error(`Kh√¥ng th·ªÉ ƒë·ªçc file m√¥ t·∫£: ${error.message}`);
  }
}

/**
 * X·ª≠ l√Ω d·ªØ li·ªáu t·ª´ m·ªôt th∆∞ m·ª•c homestay
 * @param {string} folderName - T√™n th∆∞ m·ª•c homestay
 * @returns {Promise<Object|null>} - D·ªØ li·ªáu homestay ho·∫∑c null n·∫øu l·ªói
 */
async function processHomestayFolder(folderName) {
  const accommodationPath = path.join(ROOT_PATH, folderName);
  
  try {
    // Check if both required directories exist
    const imagePath = path.join(accommodationPath, 'accomodation image');
    const infoPath = path.join(accommodationPath, 'information');
    
    const imageExists = await fs.promises.access(imagePath).then(() => true).catch(() => false);
    const infoExists = await fs.promises.access(infoPath).then(() => true).catch(() => false);
    
    // Ki·ªÉm tra xem th∆∞ m·ª•c c√≥ t·ªìn t·∫°i kh√¥ng
    const stat = await fs.promises.stat(accommodationPath);
    if (!stat.isDirectory()) {
      throw new Error('Kh√¥ng ph·∫£i l√† th∆∞ m·ª•c');
    }
    
    // T·∫°o t√™n v√† slug
    const name = folderName.replace(/_/g, ' ');
    const slug = createSlug(name);
    
    // ƒê·ªçc ·∫£nh v√† m√¥ t·∫£
    const imageUrls = await getImageUrls(accommodationPath, folderName);
    const description = await getDescription(accommodationPath);
    
    // Ki·ªÉm tra d·ªØ li·ªáu h·ª£p l·ªá
    if (imageUrls.length === 0) {
      throw new Error('Kh√¥ng t√¨m th·∫•y file ·∫£nh PNG n√†o');
    }
    
    if (!description) {
      throw new Error('N·ªôi dung m√¥ t·∫£ tr·ªëng');
    }
    
    return {
      name,
      slug,
      folderName,
      imageUrls,
      description,
      updatedAt: new Date()
    };
    
  } catch (error) {
    stats.errors.push({
      folder: folderName,
      error: error.message
    });
    console.warn(`‚ö†Ô∏è  L·ªói x·ª≠ l√Ω th∆∞ m·ª•c "${folderName}": ${error.message}`);
    return null;
  }
}

/**
 * Upsert d·ªØ li·ªáu v√†o MongoDB
 * @param {Object} collection - MongoDB collection
 * @param {Object} homestayData - D·ªØ li·ªáu homestay
 * @returns {Promise<boolean>} - true n·∫øu t·∫°o m·ªõi, false n·∫øu c·∫≠p nh·∫≠t
 */
async function upsertHomestay(collection, homestayData) {
  const filter = { folderName: homestayData.folderName };
  
  const result = await collection.replaceOne(
    filter,
    homestayData,
    { upsert: true }
  );
  
  return result.upsertedCount > 0; // true n·∫øu t·∫°o m·ªõi
}

/**
 * H√†m ch√≠nh
 */
async function main() {
  console.log('üöÄ B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô d·ªØ li·ªáu homestay...\n');
  
  let client;
  
  try {
    // K·∫øt n·ªëi MongoDB
    console.log('üì° ƒêang k·∫øt n·ªëi MongoDB...');
    client = new MongoClient(STAGING_MONGO_URI);
    await client.connect();
    
    const db = client.db(DB_NAME);
    const collection = db.collection(COLLECTION_NAME);
    
    console.log('‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng\n');
    
    // ƒê·ªçc t·∫•t c·∫£ th∆∞ m·ª•c homestay
    console.log('üìÇ ƒêang qu√©t th∆∞ m·ª•c homestay...');
    const folders = await fs.promises.readdir(ROOT_PATH);
    const homestayFolders = [];
    
    // L·ªçc ch·ªâ l·∫•y th∆∞ m·ª•c
    for (const folder of folders) {
      const folderPath = path.join(ROOT_PATH, folder);
      const stat = await fs.promises.stat(folderPath);
      if (stat.isDirectory()) {
        homestayFolders.push(folder);
      }
    }
    
    console.log(`üìä T√¨m th·∫•y ${homestayFolders.length} th∆∞ m·ª•c homestay\n`);
    
    // X·ª≠ l√Ω t·ª´ng th∆∞ m·ª•c
    for (const folderName of homestayFolders) {
      console.log("--- ƒêang x·ª≠ l√Ω th∆∞ m·ª•c:", folderName, "---");
      stats.totalScanned++;
      console.log(`üè† ƒêang x·ª≠ l√Ω: ${folderName}`);
      
      const homestayData = await processHomestayFolder(folderName);
      
      if (homestayData) {
        try {
          console.log("Chu·∫©n b·ªã c·∫≠p nh·∫≠t database v·ªõi m·∫£ng imageUrls:", homestayData.imageUrls);
          const isNew = await upsertHomestay(collection, homestayData);
          
          if (isNew) {
            stats.created++;
            console.log(`   ‚úÖ T·∫°o m·ªõi th√†nh c√¥ng`);
          } else {
            stats.updated++;
            console.log(`   üîÑ C·∫≠p nh·∫≠t th√†nh c√¥ng`);
          }
        } catch (dbError) {
          stats.errors.push({
            folder: folderName,
            error: `L·ªói database: ${dbError.message}`
          });
          console.error(`   ‚ùå L·ªói l∆∞u database: ${dbError.message}`);
        }
      }
      
      console.log(''); // D√≤ng tr·ªëng
    }
    
  } catch (error) {
    console.error('üí• L·ªói nghi√™m tr·ªçng:', error.message);
    process.exit(1);
  } finally {
    // ƒê√≥ng k·∫øt n·ªëi
    if (client) {
      await client.close();
      console.log('üîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi MongoDB');
    }
  }
  
  // In b√°o c√°o t·ªïng k·∫øt
  console.log('\n' + '='.repeat(50));
  console.log('üìã B√ÅO C√ÅO T·ªîNG K·∫æT');
  console.log('='.repeat(50));
  console.log(`üìä T·ªïng s·ªë homestay ƒë√£ qu√©t: ${stats.totalScanned}`);
  console.log(`üÜï S·ªë l∆∞·ª£ng t·∫°o m·ªõi: ${stats.created}`);
  console.log(`üîÑ S·ªë l∆∞·ª£ng c·∫≠p nh·∫≠t: ${stats.updated}`);
  console.log(`‚ùå S·ªë l∆∞·ª£ng l·ªói: ${stats.errors.length}`);
  
  if (stats.errors.length > 0) {
    console.log('\nüö® DANH S√ÅCH L·ªñI:');
    stats.errors.forEach((error, index) => {
      console.log(`${index + 1}. ${error.folder}: ${error.error}`);
    });
  }
  
  console.log('\n‚ú® Ho√†n th√†nh ƒë·ªìng b·ªô d·ªØ li·ªáu!');
}

// Main execution - ES modules way
main().catch(error => {
  console.error('üí• L·ªói kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c:', error);
  process.exit(1);
});

export {
  main,
  createSlug,
  getImageUrls,
  getDescription,
  processHomestayFolder,
  upsertHomestay
};