import Header from '@/components/Header';
import Footer from '@/components/Footer';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { MapPin, Clock, Star, Mountain, Utensils, TreePine, Home } from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Input } from '@/components/ui/input';
import { useState } from 'react';
import dragonSpineImage from '@/assets/dragon-spine.jpg';
import heroTaxuaImage from '@/assets/hero-taxua-clouds.jpg';
import localCuisineImage from '@/assets/local-cuisine.jpg';
import hmongCultureImage from '@/assets/hmong-culture.jpg';

const Explore = () => {
  const [mapboxToken, setMapboxToken] = useState('');
  const [showTokenInput, setShowTokenInput] = useState(true);

  const locations = [
    {
      id: 1,
      name: 'S·ªëng L∆∞ng Kh·ªßng Long',
      type: 'ƒê·ªânh n√∫i',
      icon: Mountain,
      coordinates: [104.5, 21.3],
      rating: 4.8,
      description: 'D√£y n√∫i h√πng vƒ© v·ªõi h√¨nh d√°ng ƒë·ªôc ƒë√°o nh∆∞ s·ªëng l∆∞ng kh·ªßng long',
      image: dragonSpineImage,
      difficulty: 'Trung b√¨nh',
      duration: '3-4 gi·ªù'
    },
    {
      id: 2,
      name: 'C√¢y C√¥ ƒê∆°n',
      type: 'ƒê·ªãa ƒëi·ªÉm ch·ª•p ·∫£nh',
      icon: TreePine,
      coordinates: [104.48, 21.28],
      rating: 4.7,
      description: 'C√¢y th√¥ng c√¥ ƒë∆°n gi·ªØa ƒë·ªìi ch√®, bi·ªÉu t∆∞·ª£ng c·ªßa T√† X√πa',
      image: heroTaxuaImage,
      difficulty: 'D·ªÖ',
      duration: '1-2 gi·ªù'
    },
    {
      id: 3,
      name: 'B·∫£n P√∫ng',
      type: 'L√†ng b·∫£n',
      icon: Home,
      coordinates: [104.52, 21.32],
      rating: 4.6,
      description: 'B·∫£n l√†ng H\'M√¥ng truy·ªÅn th·ªëng v·ªõi vƒÉn h√≥a ƒë·∫∑c s·∫Øc',
      image: hmongCultureImage,
      difficulty: 'D·ªÖ',
      duration: 'N·ª≠a ng√†y'
    },
    {
      id: 4,
      name: 'Qu√°n C√† Ph√™ SƒÉn M√¢y',
      type: '·∫®m th·ª±c',
      icon: Utensils,
      coordinates: [104.49, 21.29],
      rating: 4.5,
      description: 'Th∆∞·ªüng th·ª©c c√† ph√™ trong kh√¥ng gian m√¢y m√π',
      image: localCuisineImage,
      difficulty: 'D·ªÖ',
      duration: '1 gi·ªù'
    }
  ];

  const itineraries = [
    {
      id: 1,
      title: 'T√† X√πa 2 Ng√†y 1 ƒê√™m Cho Ng∆∞·ªùi ƒêi L·∫ßn ƒê·∫ßu',
      duration: '2N1ƒê',
      highlights: ['S·ªëng l∆∞ng kh·ªßng long', 'C√¢y c√¥ ƒë∆°n', 'Homestay truy·ªÅn th·ªëng'],
      schedule: [
        'Ng√†y 1: ƒê·∫øn T√† X√πa - Check-in homestay - Chinh ph·ª•c c√¢y c√¥ ƒë∆°n',
        'Ng√†y 2: SƒÉn m√¢y t·∫°i s·ªëng l∆∞ng kh·ªßng long - Tr·ªü v·ªÅ'
      ]
    },
    {
      id: 2,
      title: 'H√†nh Tr√¨nh SƒÉn M√¢y 3 Ng√†y 2 ƒê√™m',
      duration: '3N2ƒê',
      highlights: ['C·∫Øm tr·∫°i qua ƒë√™m', 'SƒÉn m√¢y b√¨nh minh', 'ƒê·ªânh Phu Sang'],
      schedule: [
        'Ng√†y 1: Di chuy·ªÉn - Kh√°m ph√° s∆° b·ªô - C·∫Øm tr·∫°i',
        'Ng√†y 2: SƒÉn m√¢y b√¨nh minh - Leo ƒë·ªânh Phu Sang',
        'Ng√†y 3: Th·∫£ h·ªìn v·ªõi thi√™n nhi√™n - Tr·ªü v·ªÅ'
      ]
    },
    {
      id: 3,
      title: 'Kh√°m Ph√° T√† X√πa B·∫±ng Xe M√°y',
      duration: '1-2 ng√†y',
      highlights: ['T·ª± do di chuy·ªÉn', 'Kh√°m ph√° nhi·ªÅu ƒëi·ªÉm', 'Tr·∫£i nghi·ªám ph∆∞·ª£t'],
      schedule: [
        'Linh ho·∫°t theo s·ªü th√≠ch',
        'Gh√© thƒÉm c√°c ƒëi·ªÉm n·ªïi b·∫≠t',
        'T∆∞∆°ng t√°c v·ªõi ng∆∞·ªùi d√¢n ƒë·ªãa ph∆∞∆°ng'
      ]
    }
  ];

  const getTypeColor = (type: string) => {
    const colors: { [key: string]: string } = {
      'ƒê·ªânh n√∫i': 'bg-blue-100 text-blue-700',
      'ƒê·ªãa ƒëi·ªÉm ch·ª•p ·∫£nh': 'bg-purple-100 text-purple-700',
      'L√†ng b·∫£n': 'bg-green-100 text-green-700',
      '·∫®m th·ª±c': 'bg-orange-100 text-orange-700'
    };
    return colors[type] || 'bg-gray-100 text-gray-700';
  };

  const handleTokenSubmit = () => {
    setShowTokenInput(false);
  };

  return (
    <div className="min-h-screen bg-background">
      <Header />
      
      <main className="pt-16">
        {/* Hero Section */}
        <section className="relative h-96 bg-gradient-to-r from-primary to-secondary flex items-center justify-center">
          <div className="absolute inset-0 bg-black/40" />
          <div className="relative text-center text-white z-10">
            <h1 className="font-playfair text-4xl md:text-6xl font-bold mb-4">
              Kh√°m Ph√° T√† X√πa
            </h1>
            <p className="font-inter text-xl md:text-2xl max-w-2xl mx-auto">
              B·∫£n ƒë·ªì t∆∞∆°ng t√°c v√† h∆∞·ªõng d·∫´n chi ti·∫øt cho h√†nh tr√¨nh c·ªßa b·∫°n
            </p>
          </div>
        </section>

        {/* Main Content */}
        <section className="py-16 container mx-auto px-4">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            {/* Interactive Map */}
            <div className="lg:col-span-2">
              <Card className="h-96">
                <CardHeader>
                  <CardTitle className="font-playfair text-2xl text-foreground flex items-center">
                    <MapPin className="w-6 h-6 mr-2 text-primary" />
                    B·∫£n ƒê·ªì T∆∞∆°ng T√°c T√† X√πa
                  </CardTitle>
                </CardHeader>
                <CardContent className="h-full flex items-center justify-center">
                  {showTokenInput ? (
                    <div className="text-center space-y-4 max-w-md">
                      <p className="text-muted-foreground">
                        ƒê·ªÉ hi·ªÉn th·ªã b·∫£n ƒë·ªì t∆∞∆°ng t√°c, vui l√≤ng nh·∫≠p Mapbox token c·ªßa b·∫°n:
                      </p>
                      <div className="flex gap-2">
                        <Input
                          placeholder="Nh·∫≠p Mapbox token..."
                          value={mapboxToken}
                          onChange={(e) => setMapboxToken(e.target.value)}
                        />
                        <Button onClick={handleTokenSubmit}>
                          K√≠ch Ho·∫°t
                        </Button>
                      </div>
                      <p className="text-sm text-muted-foreground">
                        L·∫•y token mi·ªÖn ph√≠ t·∫°i{' '}
                        <a href="https://mapbox.com" target="_blank" rel="noopener noreferrer" className="text-primary hover:underline">
                          mapbox.com
                        </a>
                      </p>
                    </div>
                  ) : (
                    <div className="w-full h-full bg-muted rounded-lg flex items-center justify-center">
                      <p className="text-muted-foreground">B·∫£n ƒë·ªì s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã ·ªü ƒë√¢y</p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>

            {/* Locations List */}
            <div className="lg:col-span-1">
              <Card>
                <CardHeader>
                  <CardTitle className="font-playfair text-xl text-foreground">
                    Danh S√°ch ƒê·ªãa ƒêi·ªÉm
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  {locations.map((location) => {
                    const IconComponent = location.icon;
                    return (
                      <div 
                        key={location.id} 
                        className="p-4 border border-border rounded-lg hover:shadow-soft transition-shadow cursor-pointer"
                      >
                        <div className="flex items-start space-x-3">
                          <div className="w-10 h-10 bg-primary/20 rounded-full flex items-center justify-center flex-shrink-0">
                            <IconComponent className="w-5 h-5 text-primary" />
                          </div>
                          <div className="flex-1 min-w-0">
                            <div className="flex items-center justify-between mb-1">
                              <h4 className="font-semibold text-foreground truncate">
                                {location.name}
                              </h4>
                              <div className="flex items-center space-x-1">
                                <Star className="w-4 h-4 text-yellow-400 fill-current" />
                                <span className="text-sm font-semibold">{location.rating}</span>
                              </div>
                            </div>
                            <Badge variant="secondary" className={`text-xs mb-2 ${getTypeColor(location.type)}`}>
                              {location.type}
                            </Badge>
                            <p className="text-sm text-muted-foreground mb-2">
                              {location.description}
                            </p>
                            <div className="flex items-center space-x-3 text-xs text-muted-foreground">
                              <span>‚è± {location.duration}</span>
                              <span>üìç {location.difficulty}</span>
                            </div>
                          </div>
                        </div>
                      </div>
                    );
                  })}
                  
                  <Alert>
                    <MapPin className="h-4 w-4" />
                    <AlertDescription>
                      Nh·∫•p v√†o ƒë·ªãa ƒëi·ªÉm tr√™n b·∫£n ƒë·ªì ƒë·ªÉ xem th√¥ng tin chi ti·∫øt v√† ·∫£nh.
                    </AlertDescription>
                  </Alert>
                </CardContent>
              </Card>
            </div>
          </div>
        </section>

        {/* Suggested Itineraries */}
        <section className="py-16 bg-muted/30">
          <div className="container mx-auto px-4">
            <div className="text-center mb-12">
              <h2 className="font-playfair text-3xl md:text-4xl font-bold text-foreground mb-6">
                L·ªãch Tr√¨nh G·ª£i √ù
              </h2>
              <p className="font-inter text-lg text-muted-foreground">
                C√°c h√†nh tr√¨nh ƒë∆∞·ª£c thi·∫øt k·∫ø s·∫µn cho tr·∫£i nghi·ªám ho√†n h·∫£o
              </p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
              {itineraries.map((itinerary) => (
                <Card key={itinerary.id} className="hover:shadow-medium transition-shadow">
                  <CardHeader>
                    <div className="flex items-center justify-between mb-2">
                      <Badge variant="outline" className="text-primary border-primary">
                        {itinerary.duration}
                      </Badge>
                      <Clock className="w-4 h-4 text-muted-foreground" />
                    </div>
                    <CardTitle className="font-playfair text-lg text-foreground">
                      {itinerary.title}
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <h4 className="font-semibold text-foreground mb-2">ƒêi·ªÉm n·ªïi b·∫≠t:</h4>
                      <div className="space-y-1">
                        {itinerary.highlights.map((highlight, index) => (
                          <div key={index} className="flex items-center space-x-2">
                            <div className="w-1.5 h-1.5 bg-primary rounded-full" />
                            <span className="text-sm text-muted-foreground">{highlight}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                    
                    <div>
                      <h4 className="font-semibold text-foreground mb-2">L·ªãch tr√¨nh:</h4>
                      <div className="space-y-1">
                        {itinerary.schedule.map((day, index) => (
                          <p key={index} className="text-sm text-muted-foreground">
                            {day}
                          </p>
                        ))}
                      </div>
                    </div>

                    <Button className="w-full bg-primary text-primary-foreground hover:bg-primary/90">
                      Chi Ti·∫øt L·ªãch Tr√¨nh
                    </Button>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        </section>
      </main>

      <Footer />
    </div>
  );
};

export default Explore;